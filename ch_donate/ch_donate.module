<?php


require_once('ch_donate.ca.inc');

/**
 * Implementation of hook_menu()
 */
function ch_donate_menu() {
  $items = array();
  
  $items['donate/online'] = array(
    'title' => t('Donate'),
    'description' => t('Make a donation.'),
    'page callback' => 'ch_donate_show',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  //$items['donate/canadian'] = $items['donate/online'];
  $items['donate/spanish'] = $items['donate/online'];
  $items['donate/online/review'] = array(
    'title' => t('Review donation'),
    'description' => t('Review an order before final submission.'),
    'page callback' => 'ch_donate_review',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/donate'] = array(
    'title' => t('Donation Form Settings'),
    'description' => t('Adjust options for the online donation page'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ch_donate_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'ch_donate.admin.inc',
  );
  return $items;
}

/**
 * Implementation of hook_theme()
 */
function ch_donate_theme() {
  return array(
    'ch_donate_checkout' => array(
      'arguments' => array('content' => ''),
    ),
    'ch_donate_fieldset' => array(
      'arguments' => array('element' => NULL),
    ),
    'ch_donate_tribute' => array(
      'arguments' => array('element' => NULL),
    ),
    'ch_donate_newsletter_label' => array(
      'arguments' => array('node' => NULL),
    ),
    'ch_donate_completion_message' => array(
      'arguments' => array(),
    ),
  );
}

/**
 * @return the nid of the first published donation product
 */
function ch_donate_donation_nid( $frequency = '' ) {
  if ( $frequency == 'single' ) { $frequency = ''; }
  $type = 'donation';
  if ( $frequency ) {
    $type .= '_'.$frequency;
  }
  // See if there's a donation item
  return db_result(db_query("SELECT nid FROM {node} WHERE type='%s' AND status <> 0 LIMIT 1", $type));
}

function ch_donate_is_donation( &$item ) {
  if ( !$item->node ) {
    $item->node = node_load($item->nid);
  }
  if ( $item->node->type == 'donation' || $item->node->type == 'donation_monthly' ) {
    return TRUE;
  }
  return FALSE;
}

function ch_donate_is_recurring( $item ) {
  static $nids;
  
  if ( !$nids ) {
    $nids = array();
    $result = db_query("SELECT nid FROM {node} WHERE type='%s' AND status<>0", 'donation_monthly');
    while ( $row = db_fetch_object($result) ) {
      $nids[] = $row->nid;
    }
  }
  
  if ( is_object($item) ) {
    $nid = $item->nid;
  } else {
    $nid = $item;
  }
  
  return in_array($nid, $nids);
}

/**
 * Builds the online donation page
 */
function ch_donate_show( $currency = 'USD' ) {
  // let other modules know that this isn't the normal checkout form
  global $donation_page;
  $donation_page = TRUE;
  if ( $_POST['panes']['donate']['amount'] > 0 ) {
    $_SESSION['donation_amount'] = $_POST['panes']['donate']['amount'];
  }
  
  unset($_SERVER['HTTP_REFERER']);
  $_SESSION['uc_referer_uri'] = 'http://'.$_SERVER['SERVER_NAME'].'/cart/checkout';
  
  // Check if a donation is already in the cart
  $donation = FALSE;
  $cart_items = uc_cart_get_contents();
  foreach ( $cart_items as $item ) {
    if ( $donation === FALSE && ch_donate_is_donation($item) ) {
      $donation = $item;
    } else {
      uc_cart_remove_item($item->nid, NULL, $item->data);
    }
  }
  
  if ( $donation === FALSE ) {
    // See if there's a donation item
    $nid = ch_donate_donation_nid();
    if ( !$nid ) { // if not, go to the main donate page
      drupal_goto('donate');
      return;
    }
    
    // Empty the cart, add one donation item with default value
    uc_cart_empty(uc_cart_get_id());
    $item = array(
      'nid' => $nid,
      'varprice' => 100,
      'qty' => 1,
    );
    uc_cart_add_item($item['nid'], $item['qty'], module_invoke_all('add_to_cart_data', $item), NULL, FALSE);
    uc_cart_get_contents(NULL, 'rebuild');
  }
  
  // make sure uc_cart.pages.inc is loaded
  $checkout_menu_item = menu_get_item('cart/checkout');
  if ( $checkout_menu_item['file'] ) {
    require_once($checkout_menu_item['file']);
  }
  
  if ( arg(1) == 'canadian' ) {
    drupal_set_title(variable_get('ch_donate_CAD_title', 'Donate'));
    $intro = '<div class="checkout-intro">'.variable_get('ch_donate_CAD_intro', '').'</div>';
  } elseif ( arg(1) == 'spanish' ) {
    drupal_set_title(variable_get('ch_donate_spanish_title', 'Donate'));
    $intro = '<div class="checkout-intro">'.variable_get('ch_donate_spanish_intro', '').'</div>';
  /**
   * @author    Richard Castera
   * @date      2/8/2010
   * @comments  Added to display a different page title for monthly donations.  
   * @ticket    https://snac.sankyserver.com/projects/144/tickets/40     
   **/
  } elseif ($_GET['dt'] == 'monthly') {
     drupal_set_html_head('<script language="JavaScript" src="https://seal.networksolutions.com/siteseal/javascript/siteseal.js" type="text/javascript"></script>');
     $append_seal = '<div style="float:right"><script language="JavaScript" type="text/javascript">SiteSeal("https://seal.networksolutions.com/images/basicrecgreen.gif","NETSP","none");</script></div>';

 
    drupal_set_title(variable_get('ch_donate_monthly_title', 'Donate'));
    $intro = $append_seal.'<div class="checkout-intro">'.variable_get('ch_donate_monthly_intro', '').'</div>';
  } else {
     drupal_set_html_head('<script language="JavaScript" src="https://seal.networksolutions.com/siteseal/javascript/siteseal.js" type="text/javascript"></script>');
     $append_seal = '<div style="float:right"><script language="JavaScript" type="text/javascript">SiteSeal("https://seal.networksolutions.com/images/basicrecgreen.gif","NETSP","none");</script></div>';



    drupal_set_title(variable_get('ch_donate_title', 'Donate'));
    $intro = $append_seal.'<div class="checkout-intro">'.variable_get('ch_donate_intro', '').'</div>';
  }
  
  // build the checkout form
  return theme('ch_donate_checkout', $intro.uc_cart_checkout());
}


/**
 * Implementation of hook_add_to_cart()
 * Remove any donations if anything else is added to the cart
 */
function ch_donate_add_to_cart( $nid, $qty, $data ) {
  $newitem = node_load($nid);
  if ( $newitem->type == 'donation_monthly' ) {
    uc_cart_empty(uc_cart_get_id());
  }
  $cart = uc_cart_get_contents();
  foreach ( $cart as $item ) {
    if ( ch_donate_is_donation($item) ) {
      uc_cart_remove_item($item->nid, NULL, $item->data);
    }
  }
}

/**
 * Implementation of hook_checkout_pane()
 * Adds a donation form to the checkout page
 */
function ch_donate_checkout_pane() {
  $panes = array();
  
  $panes[] = array(
    'id' => 'donate',
    'title' => t('Donation Amount'),
    'callback' => 'ch_donate_checkout_pane_donate',
    'desc' => t('Provides a donation form'),
    'weight' => -50,
    'process' => FALSE,
    'collapsible' => FALSE
  );
  
  $panes[] = array(
    'id' => 'tribute',
    'title' => t('Tribute Information'),
    'callback' => 'ch_donate_checkout_pane_tribute',
    'desc' => t('Provides a tribute form'),
    'weight' => 5.5,
    'process' => FALSE,
    'collapsible' => FALSE
  );
  
  return $panes;
}

function ch_donate_checkout_pane_donate( $op, &$order, $arg2 ) {
  switch ( $op ) {
    case 'view': // display the donation form on the checkout page
      $donation = FALSE;
      $cart_items = uc_cart_get_contents();
      foreach ( $cart_items as $item ) {
        if ( ch_donate_is_donation($item) ) {
          $donation = $item;
          break;
        }
      }
      
      $description = t('(In U.S. Dollars)');
      if ( arg(1) == 'canadian' ) {
        $description = t('(In Canadian Dollars)');
      }
      
      /**
       * @author    Richard Castera
       * @date      2/8/2010
       * @comments  Added to display a different monetary amounts for monthly donations.  
       * @ticket    https://snac.sankyserver.com/projects/144/tickets/40     
       **/z
      if($_GET['dt'] == 'monthly') {
        $amount_suggestions = explode("\n", variable_get('ch_donate_monthly_suggestions', "10\n20\n40\n50\n60\n80\n100"));  
      }
      else {
        $amount_suggestions = explode("\n", variable_get('ch_donate_suggestions', "100\n250\n500\n750\n1000\n2500\n5000"));  
      }
    
      $amount_options = array();
      foreach ( $amount_suggestions as $amount ) {
        if ( is_numeric(trim($amount)) ) {
          $amount_options[(int)$amount] = '$'.number_format((int)$amount);
        }
      }
      $amount_options['other'] = t('Other Amount');
      $contents['amount'] = array(
        '#type' => 'radios',
        '#options' => $amount_options,
      );
      if ( $donation ) {
        if ( in_array($donation->data['varprice'], $contents['amount']['#options']) ) {
          $contents['amount']['#default_value'] = $donation->data['varprice'];
        } else {
          $contents['amount']['#default_value'] = 'other';
        }
      }
      /*if ( $_SESSION['donation_amount'] > 0 ) {
        $contents['amount']['#default_value'] = $_SESSION['donation_amount'];
      }
      unset($_SESSION['donation_amount']);*/
      $contents['other_amount'] = array(
        '#type' => 'textfield',
        '#size' => 10,
        '#default_value' => '',
      );
      if ( $donation ) {
        $contents['amount']['#default_value'] = $donation->data['varprice'];
      }
      if ( arg(0) == 'donate' && arg(1) != 'canadian' ) {
        $contents['frequency'] = array(
          '#type' => 'radios',
          '#options' => array(
            'single' => t('One-Time Gift'),
            'monthly' => t('Monthly Gift <span class="note">(Please make this an automatic monthly gift from my credit card)</span>'),
          ),
          '#default_value' => 'single',
        );
        if ( $donation->node->type == 'donation_monthly' || $_GET['dt'] == 'monthly' ) {
          $contents['frequency']['#default_value'] = 'monthly';
          
          /**
           * @author    Richard Castera
           * @date      2/9/2010
           * @comments  Default the donation amount to $50 if the donation type is monthly 
           * @ticket    https://snac.sankyserver.com/projects/144/tickets/40     
           **/
           $contents['amount']['#default_value'] = 35;
        }
      }
      if ( arg(1) == 'canadian' ) {
        $contents['currency'] = array(
          '#type' => 'value',
          '#value' => 'CAD',
        );
      }
      if ( arg(1) == 'spanish' ) {
        $contents['language'] = array(
          '#type' => 'value',
          '#value' => 'es',
        );
        $_SESSION['ch_checkout_language'] = 'es';
      } else {
        $_SESSION['ch_checkout_language'] = 'en';
      }
      
      return array(
        'description' => $description,
        'contents' => $contents,
      );
    
    case 'process': // handle any changes to the donation amount
      $values = $arg2;
      if ( !isset($values['frequency']) ) {
        $values['frequency'] = 'single';
      }
      
      $amount = 0;
      if ( $values['amount'] == 'other' ) {
        $values['other_amount'] = str_replace(',', '', $values['other_amount']);
        $amount = (int)trim($values['other_amount']);
      } else {
        $amount = (int)$values['amount'];
      }
      if ( $amount < 1 && arg(0) == 'donate' ) {
        drupal_set_message(t('Donation amount must be at least $1'), 'error');
        return FALSE;
      }
      
      $type = 'donation';
      if ( $values['frequency'] == 'monthly' ) {
        $type .= '_monthly';
      }
      if ( $type == 'donation_monthly' ) {
        $item = reset($order->products);
        if ( $item !== FALSE ) { $node = node_load($item->nid); }
        if ( count($order->products) > 1 || $item === FALSE || $node->type != $type || $item->data['varprice'] != $amount ) {
          // change the item in the cart
          uc_cart_empty(uc_cart_get_id());
          $item = array(
            'nid' => ch_donate_donation_nid($values['frequency']),
            'varprice' => $amount,
            'qty' => 1,
          );
          uc_cart_add_item($item['nid'], $item['qty'], module_invoke_all('add_to_cart_data', $item), NULL, FALSE);
        
          // uc_cart_add_item destroys $_SESSION['cart_order']
          $order = uc_order_new($user->uid);
          $_SESSION['cart_order'] = $order->order_id;
          $order->products = uc_cart_get_contents(NULL, 'rebuild');
          $order->products[0]->data['pfp_renew'] = array('vid' => $order->products[0]->vid, 'model' => $order->products[0]->model, 'period' => 'M', 'renew' => 1, 'terms' => 0);
          $order->order_total = uc_order_get_total($order, TRUE);
          $order->line_items = uc_order_load_line_items($order, TRUE);
          uc_order_save($order);
        }
      } elseif ( $type == 'donation' ) {
        // remove any donations in the cart that don't match this one
        $donation = FALSE;
        $cart_changed = FALSE;
        foreach ( $order->products as $product ) {
          $node = node_load($product->nid);
          if ( $node->type == 'donation_monthly' ) {
            // remove from the cart
            uc_cart_remove_item($product->nid, NULL, $product->data);
            $cart_changed = TRUE;
          } elseif ( $node->type == 'donation' ) {
            if ( $donation !== FALSE ) {
              // already have one, so remove this one
              uc_cart_remove_item($product->nid, NULL, $product->data);
              $cart_changed = TRUE;
            } elseif ( $product->data['varprice'] == $amount ) {
              $donation = $product;
            } else {
              uc_cart_remove_item($product->nid, NULL, $product->data);
              $cart_changed = TRUE;
            }
          }
        }
        if ( $donation === FALSE ) {
          if ( $amount >= 1 ) {
            $cart_changed = TRUE;
            $item = array(
              'nid' => ch_donate_donation_nid(),
              'varprice' => $amount,
              'qty' => 1,
            );
            uc_cart_add_item($item['nid'], $item['qty'], module_invoke_all('add_to_cart_data', $item), NULL, FALSE);
          }
        }
        if ( $cart_changed !== FALSE ) {
          $old_order = $order;
          $order = uc_order_new($user->uid);
          $_SESSION['cart_order'] = $order->order_id;
          $order->products = uc_cart_get_contents(NULL, 'rebuild');
          $order->order_total = uc_order_get_total($order, TRUE);
          $order->line_items = uc_order_load_line_items($order, TRUE);
          uc_order_save($order);
          uc_order_delete($old_order->order_id);
        }
      }
      if ( $values['currency'] == 'CAD' ) {
        $order->data['currency'] = 'CAD';
      }
      if ( $values['language'] == 'es' ) {
        $order->data['language'] = 'es';
      }
      
      
      return TRUE;
      
  }
}

function ch_donate_checkout_pane_tribute( $op, &$arg1, $arg2 ) {
  switch ( $op ) {
    case 'view':
      $description = t('Would you like to dedicate your gift?');
      $contents['tribute_type'] = array(
        '#type' => 'radios',
        '#options' => array(
          'regular' => t('This is not a tribute gift'),
          'memory' => t('I am making this contribution in memory of'),
          'honor' => t('I am making this contribution in honor of'),
          //'christmas' => t('I am making this contribution in lieu of a Christmas gift to'),
        ),
        '#default_value' => 'regular',
      );
      
      // Memory
      $contents['remembered'] = array(
        '#type' => 'textfield',
        '#size' => 20,
      );
      if ( $arg1->donation_type == 'memory' ) {
        $contents['remembered'] = $arg1->data['tributee'];
      }
      
      //Honor
      $contents['honored'] = array(
        '#type' => 'textfield',
        '#size' => 20,
      );
      if ( $arg1->donation_type == 'honor' ) {
        $contents['honored'] = $arg1->data['tributee'];
      }
      
      //Christmas
//      $contents['christmas_gift'] = array(
//        '#type' => 'textfield',
//        '#size' => 20,
//      );
//      if ( $arg1->donation_type == 'christmas' ) {
//        $contents['christmas_gift'] = $arg1->data['tributee'];
//      }
      
      $contents['acknowledge'] = array(
        '#type' => 'checkbox',
        '#title' => t('Please send an acknowledgment of this gift to:'),
      );
      
      $contents['acknowledgement'] = array(
        '#theme' => 'address_pane'
      );
      
      $contents['acknowledgement']['acknowledgement_first_name'] = uc_textfield(uc_get_field_name('first_name'), $arg1->data['acknowledgement']['first_name'], FALSE);
      $contents['acknowledgement']['acknowledgement_last_name'] = uc_textfield(uc_get_field_name('last_name'), $arg1->data['acknowledgement']['last_name'], FALSE);
      $contents['acknowledgement']['acknowledgement_street1'] = uc_textfield(uc_get_field_name('street1'), $arg1->data['acknowledgement']['street1'], FALSE, NULL, 64);
      $contents['acknowledgement']['acknowledgement_street2'] = uc_textfield(uc_get_field_name('street2'), $arg1->data['acknowledgement']['street2'], FALSE, NULL, 64);
      $contents['acknowledgement']['acknowledgement_city'] = uc_textfield(uc_get_field_name('city'), $arg1->data['acknowledgement']['city'], FALSE);
      $contents['acknowledgement']['acknowledgement_country'] = uc_country_select(uc_get_field_name('country'), $arg1->data['acknowledgement']['country'], NULL, 'name', FALSE);
      
      if (isset($_POST['panes']['tribute']['acknowledgement']['acknowledgement_country'])) {
        $country_id = intval($_POST['panes']['tribute']['acknowledgement']['acknowledgement_country']);
      }
      else {
        $country_id = $arg1->data['acknowledgement']['country'];
      }
      $contents['acknowledgement']['acknowledgement_zone'] = uc_zone_select(uc_get_field_name('zone'), $arg1->data['acknowledgement']['zone'], NULL, $country_id, 'name', FALSE);
      if (isset($_POST['panes']) && count($contents['acknowledgement']['acknowledgement_zone']['#options']) == 1) {
        $contents['acknowledgement']['acknowledgement_zone']['#required'] = FALSE;
      }
      $contents['acknowledgement']['acknowledgement_postal_code'] = uc_textfield(uc_get_field_name('postal_code'), $arg1->data['acknowledgement']['postal_code'], FALSE, NULL, 10, 10);
      $contents['acknowledgement']['acknowledgement_phone'] = uc_textfield(uc_get_field_name('phone'), $arg1->data['acknowledgement']['phone'], FALSE, NULL, 32, 16);
      $contents['acknowledgement']['acknowledgement_email'] = uc_textfield("Email", $arg1->data['acknowledgement']['email'], FALSE);
      
      return array(
        'description' => $description,
        'contents' => $contents,
      );
    
    case 'process':
      $arg1->data['donation_type'] = $arg2['tribute_type'];
      if ( $arg1->data['donation_type'] == 'memory' ) {
        $arg1->data['tributee'] = $arg2['remembered'];
      } elseif ( $arg1->data['donation_type'] == 'honor' ) {
        $arg1->data['tributee'] = $arg2['honored'];
      }
      //elseif ( $arg1->data['donation_type'] == 'christmas' ) {
//        $arg1->data['tributee'] = $arg2['christmas_gift'];
//      }
      
      if ( $arg2['acknowledge'] ) {
        $arg1->data['acknowledgement']['first_name'] = $arg2['acknowledgement']['acknowledgement_first_name'];
        $arg1->data['acknowledgement']['last_name'] = $arg2['acknowledgement']['acknowledgement_last_name'];
        $arg1->data['acknowledgement']['street1'] = $arg2['acknowledgement']['acknowledgement_street1'];
        $arg1->data['acknowledgement']['street2'] = $arg2['acknowledgement']['acknowledgement_street2'];
        $arg1->data['acknowledgement']['city'] = $arg2['acknowledgement']['acknowledgement_city'];
        $arg1->data['acknowledgement']['zone'] = $arg2['acknowledgement']['acknowledgement_zone'];
        $arg1->data['acknowledgement']['postal_code'] = $arg2['acknowledgement']['acknowledgement_postal_code'];
        if ( $arg2['acknowledgement']['acknowledgement_country'] ) {
          $arg1->data['acknowledgement']['country'] =  uc_country_get_by_id($arg2['acknowledgement']['acknowledgement_country']);
        }
        $arg1->data['acknowledgement']['phone'] = $arg2['acknowledgement']['acknowledgement_phone'];
        $arg1->data['acknowledgement']['email'] = $arg2['acknowledgement']['acknowledgement_email'];
      }
      return TRUE;
    
  }
}

function ch_donate_form_uc_cart_checkout_form_alter( &$form ) {
  global $user;
  if ( arg(0) == 'cart' ) {
    $form['panes']['donate']['#title'] = t('Optional Additional Donation');
  }
  $form['panes']['customer']['#title'] = t('Email Confirmation');
  if ( !$user || $user->uid == 0 ) {
    $form['panes']['customer']['#description'] = t('Your donation receipt will be sent to this address.');
  }
  $form['panes']['delivery']['#title'] = t('Donor Information');
  $form['panes']['delivery']['#description'] = '';
  if ( $form['panes']['billing']['copy_address'] ) {
    $form['panes']['billing']['copy_address']['#title'] = t('Please check this box if billing information is the same as above.');
  }
  if ( $form['panes']['payment']['payment_method']['#options']['credit'] ) {
    $form['panes']['payment']['payment_method']['#options']['credit'] .= t(' Credit card type will be automatically determined.');
  }
   // Network Solutions Site Seal
//   drupal_set_html_head('<script language="JavaScript" src="https://seal.networksolutions.com/siteseal/javascript/siteseal.js" type="text/javascript"></script>');
//   $form['continue']['#suffix'] = '<script language="JavaScript" type="text/javascript">SiteSeal("https://seal.networksolutions.com/images/basicrecgreen.gif","NETSP","none");</script>';

  $form['panes']['billing']['billing_country']['#weight'] = 1;
  $form['panes']['billing']['billing_phone']['#weight'] = 2;
  $form['panes']['delivery']['delivery_country']['#weight'] = 1;
  $form['panes']['delivery']['delivery_phone']['#weight'] = 2;
  
  foreach ( element_children($form['panes']) as $i ) {
    if ( $form['panes'][$i]['#type'] == 'fieldset' ) {
      $form['panes'][$i]['#type'] = 'ch_donate_fieldset';
    }
    if ( $i == 'tribute' ) {
      $form['panes'][$i]['#theme'] = 'ch_donate_tribute';
    }
  }
  
  unset($form['cancel']);
  
  if ( arg(1) == 'spanish' ) {
    $form['#attributes']['class'] = 'spanish-donation-form';
    ch_donate_checkout_form_translate('es', $form);
  }
  
  if ( arg(1) == 'canadian' ) {
    $form['#attributes']['class'] = 'canadian-donation-form';
    if (isset($_POST['panes']['delivery']['delivery_country'])) {
      $country_id = intval($_POST['panes']['delivery']['delivery_country']);
    }
    else {
      $country_id = 124;
    }
    $form['panes']['delivery']['delivery_country'] = uc_country_select(uc_get_field_name('country'), $country_id, NULL, 'name', uc_address_field_required('country'));
    $form['panes']['billing']['billing_country'] =  uc_country_select(uc_get_field_name('country'), $country_id, NULL, 'name', uc_address_field_required('country'));
    $form['panes']['delivery']['delivery_zone'] = uc_zone_select(uc_get_field_name('zone'), $arg1->delivery_zone, NULL, $country_id, 'name', uc_address_field_required('zone'));
    $form['panes']['billing']['billing_zone'] = uc_zone_select(uc_get_field_name('zone'), $arg1->billing_zone, NULL, $country_id, 'name', uc_address_field_required('zone'));
  }
  
  drupal_add_css(drupal_get_path('module', 'ch_donate').'/ch_donate.css');
  drupal_add_js(drupal_get_path('module', 'ch_donate').'/ch_donate.js');
  
  // Network Solutions Site Seal
  // drupal_set_html_head('<script language="JavaScript" src="https://seal.networksolutions.com/siteseal/javascript/siteseal.js" type="text/javascript"></script>');
  //$form['continue']['#suffix'] = '<script language="JavaScript" type="text/javascript">SiteSeal("https://seal.networksolutions.com/images/basicrecgreen.gif","NETSP","none");</script>';
  
  $form['#submit'][] = 'ch_donate_checkout_submit';
  global $donation_page;
  if ( $donation_page !== TRUE ) {
    return;
  }
  $form['#validate'][] = 'ch_donate_checkout_validate';
}

function ch_donate_checkout_form_translate( $language = 'es', &$form ) {
  switch ( $language ) {
    case 'es':
      // Donation Amount
      $form['panes']['donate']['#title'] = 'Monto de la donación';
      $form['panes']['donate']['#description'] = '(en dólares de EEUU)';
      $form['panes']['donate']['amount']['#options']['other'] = 'Otro Monto';
      $form['panes']['donate']['frequency']['#options']['single'] = 'Donación única';
      $form['panes']['donate']['frequency']['#options']['monthly'] = 'Donación mensual <span class="note">(un cargo mensual automático a su tarjeta de crédito aportará un apoyo constante para ayudar a reconstruir la vida de los niños de la calle)</span>';
      
      // Email confirmation
      $form['panes']['customer']['#title'] = 'Correo electrónico/email';

      $form['panes']['customer']['#description'] = '';
      $form['panes']['customer']['primary_email']['#title'] = 'Correo electrónico/email';
      
      // Donor Information
      $form['panes']['delivery']['#title'] = 'Información del donante';
      $form['panes']['delivery']['delivery_first_name']['#title'] = 'Nombre';
      $form['panes']['delivery']['delivery_last_name']['#title'] = 'Apellido';
      $form['panes']['delivery']['delivery_street1']['#title'] = 'Dirección 1';
      $form['panes']['delivery']['delivery_street2']['#title'] = 'Dirección 2';
      $form['panes']['delivery']['delivery_city']['#title'] = 'Ciudad';
      $form['panes']['delivery']['delivery_country']['#title'] = 'País';
      $form['panes']['delivery']['delivery_zone']['#title'] = 'Estado';
      $form['panes']['delivery']['delivery_postal_code']['#title'] = 'Código postal';
      $form['panes']['delivery']['delivery_phone']['#title'] = 'Teléfono';
      
      // Billing information
      $form['panes']['billing']['#title'] = 'Datos de facturación';
      $form['panes']['billing']['#description'] = '';
      $form['panes']['billing']['copy_address']['#title'] = 'Datos de facturación son iguales a la información del donante arriba. Si no, facilite la información abajo:';
      $form['panes']['billing']['billing_first_name']['#title'] = 'Nombre';
      $form['panes']['billing']['billing_last_name']['#title'] = 'Apellido';
      $form['panes']['billing']['billing_street1']['#title'] = 'Dirección 1';
      $form['panes']['billing']['billing_street2']['#title'] = 'Dirección 2';
      $form['panes']['billing']['billing_city']['#title'] = 'Ciudad';
      $form['panes']['billing']['billing_country']['#title'] = 'País';
      $form['panes']['billing']['billing_zone']['#title'] = 'Estado';
      $form['panes']['billing']['billing_postal_code']['#title'] = 'Código postal';
      $form['panes']['billing']['billing_phone']['#title'] = 'Teléfono';
      
      // Tribute information
      $form['panes']['tribute']['#title'] = 'Información tributaria';
      $form['panes']['tribute']['#description'] = '';
      $form['panes']['tribute']['tribute_type']['#options']['regular'] = 'Esta donación no es un tributo';
      $form['panes']['tribute']['tribute_type']['#options']['memory'] = 'Estoy haciendo esta donación en memoria a';
      $form['panes']['tribute']['tribute_type']['#options']['honor'] = 'Estoy haciendo esta donación en honor a';
      $form['panes']['tribute']['acknowledge']['#title'] = 'Por favor, envíe reconocimiento de esta donación a la siguiente persona:';
      $form['panes']['tribute']['acknowledgement']['acknowledgement_first_name']['#title'] = 'Nombre';
      $form['panes']['tribute']['acknowledgement']['acknowledgement_last_name']['#title'] = 'Apellido';
      $form['panes']['tribute']['acknowledgement']['acknowledgement_street1']['#title'] = 'Dirección 1';
      $form['panes']['tribute']['acknowledgement']['acknowledgement_street2']['#title'] = 'Dirección 2';
      $form['panes']['tribute']['acknowledgement']['acknowledgement_city']['#title'] = 'Ciudad';
      $form['panes']['tribute']['acknowledgement']['acknowledgement_country']['#title'] = 'País';
      $form['panes']['tribute']['acknowledgement']['acknowledgement_zone']['#title'] = 'Estado';
      $form['panes']['tribute']['acknowledgement']['acknowledgement_postal_code']['#title'] = 'Código postal';
      $form['panes']['tribute']['acknowledgement']['acknowledgement_phone']['#title'] = 'Teléfono';
      $form['panes']['tribute']['acknowledgement']['acknowledgement_email']['#title'] = 'Correo electrónico/email';
      
      // Payment
      $form['panes']['payment']['#title'] = 'Información de pago';
      $form['panes']['payment']['#description'] = '';
      $form['panes']['payment']['payment_method']['#title'] = 'Información de pago';
      $form['panes']['payment']['payment_method']['#options']['credit'] = str_replace('Credit card:', 'Pago con tarjeta de crédito:', $form['panes']['payment']['payment_method']['#options']['credit']);
      $form['panes']['payment']['payment_method']['#options']['credit'] = str_replace('Credit card type will be automatically determined.', 'Tipo de tarjeta de crédito se determinará automáticamente.', $form['panes']['payment']['payment_method']['#options']['credit']);
      $form['panes']['payment']['payment_method']['#options']['paypal_wps'] = str_replace('PayPal - pay without sharing your financial information.', 'Pago con PayPal', $form['panes']['payment']['payment_method']['#options']['paypal_wps']);
      
      // Newsletter subscriptions
      $form['panes']['subscribe']['#title'] = '¡Subscríbase a los boletines electrónicos de Covenant House!';
      foreach ( $form['panes']['subscribe']['subscriptions']['#options'] as $key=>$label ) {
        switch ( $key ) {
          case 48:
            $title = 'Covenant House Beacon (en Inglés)';
            $description = 'Manténgase informado mensualmente con el boletín que destaca algunos de los niños que han encontrado su camino a Covenant House.';
            break;
          case 49:
            $title = 'Reflexiones diarias de Covenant House (en Inglés)';
            $description = 'Comience cada día con un mensaje inspiracional enviado a su buzón electrónico que lo ayudará a llevar su día.';
            break;
          case 50:
            $title = 'Sea una voz (en Inglés)';
            $description = 'Únase a nuestra importante campaña de acción -Ojos Abiertos- y conozca cómo usted puede ser una voz para niños en peligro.';
            break;
        }
        if ( $title ) {
          $pattern = '/(\<span class\=\"title\"\>)(.*?)(\<\/span\>)/';
          $replacement = '$1'.$title.'$3';
          $label = preg_replace($pattern, $replacement, $label);
        }
        if ( $description ) {
          $pattern = '/(\<span class\=\"description\"\>)(.*?)(\<\/span\>)/';
          $replacement = '$1'.$description.'$3';
          $label = preg_replace($pattern, $replacement, $label);
        }
        $form['panes']['subscribe']['subscriptions']['#options'][$key] = $label;
      }
      
      break;
  }
}


/**
 * Make the order recur monthly if a recurring donation is in the cart
 */
function ch_donate_form_uc_paypal_wps_form_alter( &$form, &$form_state ) {
  $order = $form['#parameters'][2];
  if ( $order->data['language'] == 'es' ) {
    $form['#attributes']['class'] = 'spanish-donation-form';
  }
  foreach ( $order->products as $product ) {
    $item = node_load($product->nid);
    if ( $item->type == 'donation_monthly' ) {
      $form['a3'] = array(
        '#type' => 'hidden',
        '#value' => (int)$product->price,
      );
      $form['p3'] = array(
        '#type' => 'hidden',
        '#value' => 1,
      );
      $form['t3'] = array(
        '#type' => 'hidden',
        '#value' => 'M',
      );
      $form['src'] = array(
        '#type' => 'hidden',
        '#value' => 1,
      );
      $form['item_name'] = array(
        '#type' => 'hidden',
        '#value' => 'Covenant House Donation',
      );
      $form['cmd']['#value'] = '_xclick-subscriptions';
    }
    break;
  }
  if ( $order->data['currency'] == 'CAD' ) {
    $form['currency_code']['#value'] = 'CAD';
  }
}

function ch_donate_checkout_validate( $form, &$form_state ) {
  // log validation errors to the order's admin comments
  if ( $_SESSION['checkout_valid'] == FALSE && $_SESSION['cart_order'] ) {
    if ( $_SESSION['messages'] && $_SESSION['messages']['error'] ) {
      global $user;
      $order = new stdClass();
      $order->order_id = $_SESSION['cart_order'];
      $order->uid = $user->uid;
      foreach( $_SESSION['messages']['error'] as $error ) {
        uc_order_comment_save($order->order_id, $order->uid, "Validation error: ".$error, 'admin');
      }
    }
  }
}

function theme_ch_donate_checkout( $content ) {
  drupal_add_css(drupal_get_path('module', 'ch_donate').'/ch_donate.css');
  drupal_add_js(drupal_get_path('module', 'ch_donate').'/ch_donate.js');
  
  // only one generic error message for Spanish users
  if ( $_SESSION['ch_checkout_language'] == 'es' && $_SESSION['messages']['error'] ) {
    $_SESSION['messages']['error'] = array(t('Por favor revise la información que ha suministrado abajo y asegúrese que todos los campos han sido llenados correctamente.'));
  }
  
  return '<div class="donate-checkout-page">'.$content.'</div>';
}


/**
 * Instead of <fieldset>s, use <div>s
 */
function theme_ch_donate_fieldset( $element ) {
  static $zebra;
  $zebra = ch_donate_zebra($zebra);
  if ( $element['#attributes']['id'] == 'cart-pane' && arg(0) == 'donate' ) {
    // this won't display, so update zebra again
    $zebra = ch_donate_zebra($zebra);
  }
  $out = '<div '. drupal_attributes($element['#attributes']) .' class="checkout-pane checkout-pane-'.$zebra.'">';
  $title = $element['#title']?$element['#title']:'';
  $title .= $element['#description']?' <span class="description">'.$element['#description'].'</span>':'';
  $out .= $title?'<h3>'.$title.'</h3>':'';
  $out .=  (!empty($element['#children']) ? $element['#children'] : '') . (isset($element['#value']) ? $element['#value'] : '');
  return $out.'</div>';
}

function ch_donate_zebra( $zebra = 'even' ) {
  if ( $zebra != 'odd' ) {
    return 'odd';
  } else {
    return 'even';
  }
}

/**
 *
 */
function theme_ch_donate_tribute( $element ) {
  $out = '<div class="field-row">';
  $out .= drupal_render( $element['tribute_type']['regular'] );
  $out .= drupal_render( $element['tribute_type']['memory'] );
  $out .= drupal_render( $element['remembered'] );
  $out .= '</div><div class="field-row">';
  $out .= drupal_render( $element['tribute_type']['honor'] );
  $out .= drupal_render( $element['honored'] );
  $out .= '</div><div class="field-row">';
  //$out .= drupal_render( $element['tribute_type']['christmas'] );
  //$out .= drupal_render( $element['christmas_gift'] );
  //$out .= '</div><div class="field-row">';
  $out .= drupal_render( $element['acknowledge'] );
  $out .= drupal_render( $element['acknowledgement'] );
  $out .= '</div>';
  $element['tribute_type']['#printed'] = TRUE;
  $out .= drupal_render( $element );
  return $out;
}

function theme_ch_donate_newsletter_label( $node ) {
  return '<span class="title">'.$node->title.'</span><span class="description">'.filter_xss($node->body, array('a', 'em', 'strong', 'code')).'</span>';
}

function ch_donate_checkout_submit( $form, &$form_state ) {
  if ( isset($_SESSION['sescrd']) ) {
    $_SESSION['chsescrd'] = $_SESSION['sescrd'];
  }
  if ( $form_state['redirect'] == 'cart/checkout' ) {
    if ( $_SESSION['ch_checkout_language'] == 'es' ) {
      $form_state['redirect'] = 'donate/spanish';
    } elseif ( $_SESSION['cart_order'] ) {
      $order = uc_order_load($_SESSION['cart_order']);
      if ( $order->data['currency'] == 'CAD' ) {
        $form_state['redirect'] = 'donate/canadian';
      } else {
        if ( arg(0) == 'donate' ) {
          $form_state['redirect'] = 'donate/online';
        }
      }
    } elseif ( arg(0) == 'donate') {
      $form_state['redirect'] = 'donate/online';
    }
  } elseif ( $form_state['redirect'] == 'cart/checkout/review' ) {
    if ( arg(0) == 'donate' ) {
      $form_state['redirect'] = 'donate/online/review';
    }
  
    uc_cart_checkout_review_form_submit($form, $form_state);
    if ($form_state['redirect'] == 'cart/checkout/review') {
      // There's an error, so pretend the user clicked back.
      uc_cart_checkout_review_form_back($form, $form_state);
    }
  }
}

function ch_donate_order( $op, &$order, $arg2 ) {
  switch ($op) {
    case 'submit':
      $contact = array(
        'email' => $order->primary_email,
        'first_name' => $order->delivery_first_name,
        'last_name' => $order->delivery_last_name,
        'address_1' => $order->delivery_street1,
        'address_2' => $order->delivery_street2,
        'city' => $order->delivery_city,
        'state' => uc_get_zone_code($order->delivery_zone),
        'postal_code' => $order->delivery_postal_code,
        'country' => uc_country_get_by_id($order->delivery_country),
        'telephone' => $order->delivery_phone,
      );
      $recurring = FALSE;
      foreach ( $order->products as $product ) {
        if ( ch_donate_is_recurring($product->nid) ) {
          $recurring = TRUE;
          break;
        }
      }
      $args = array(
        'recurring' => $recurring,
        'amt' => $order->order_total,
        'timestamp' => $order->modified
      );
      ch_kintera_add_to_kintera($contact, 'donation', $args);
      break;
  }
}

function ch_donate_review(  ) {
  if ( $_POST['op'] == 'Back' ) {
    if ( $_SESSION['ch_checkout_language'] == 'es' ) {
      drupal_goto('donate/spanish');
    } elseif ( $_SESSION['cart_order'] ) {
      $order = uc_order_load($_SESSION['cart_order']);
      if ( $order->data['currency'] == 'CAD' ) {
        drupal_goto('donate/canadian');
      }
    }
    drupal_goto('donate/online');
  }
  
  if ( isset($_SESSION['chsescrd']) ) {
    $_SESSION['sescrd'] = $_SESSION['chsescrd'];
    unset($_SESSION['chsescrd']);
  }
  
  // make sure uc_cart.pages.inc is loaded
  $checkout_menu_item = menu_get_item('cart/checkout/review');
  if ( $checkout_menu_item['file'] ) {
    require_once($checkout_menu_item['file']);
  }
  
  drupal_add_js(drupal_get_path('module', 'uc_cart') .'/uc_cart.js');
  $form = drupal_get_form('uc_cart_checkout_review_form');
  
  
  if ( $_SESSION['do_review'] !== TRUE && !( uc_referer_check('donate/online') || uc_referer_check('donate/canadian') || uc_referer_check('donate/spanish') ) ) {
    drupal_goto('donate/online');
  }
  unset($_SESSION['do_review']);
  
  $order = uc_order_load($_SESSION['cart_order']);
  
  if ($order === FALSE || uc_order_status_data($order->order_status, 'state') != 'in_checkout') {
    unset($_SESSION['cart_order']);
    drupal_goto('donate/online');
  }
  
  $panes = _checkout_pane_list();
  
  // If the cart isn't shippable, bypass panes with shippable == TRUE.
  if (!uc_cart_is_shippable() && variable_get('uc_cart_delivery_not_shippable', TRUE)) {
    $panes = uc_cart_filter_checkout_panes($panes, array('shippable' => TRUE));
  }
  
  foreach ($panes as $pane) {
    if (variable_get('uc_pane_'. $pane['id'] .'_enabled', TRUE)) {
      $func = $pane['callback'];
      if (function_exists($func)) {
        $return = $func('review', $order, NULL);
        if (!is_null($return)) {
          $data[$pane['title']] = $return;
        }
      }
    }
  }
  
  $output = theme('uc_cart_checkout_review', $data, $form);
  
  return $output;
}

function ch_donate_form_uc_cart_checkout_review_form_alter( &$form ) {
  drupal_set_title(variable_get('ch_donate_review_header', 'Review Order'));
}

/**
 * Implementation of hook_uc_cart_alter()
 * Remove any donations when just showing the shopping cart
 */
function ch_donate_uc_cart_alter( &$items ) {
  if ( $_GET['q'] == 'cart' ) {
    foreach ( $items as $key=>$item ) {
      if ( ch_donate_is_donation($item) ) {
        unset($items[$key]);
        uc_cart_remove_item($item->nid, NULL, $item->data);
      }
    }
  }
}

/**
 * Implementation of hook_form_alter() for uc_cart_checkout_review_form
 */
/*function ch_donate_form_uc_cart_checkout_review_form_alter( &$form ) {
  if ($_POST['op'] == t('Back') && arg(0) == 'donate') {
    $_SESSION['do_review'] = TRUE;
  }
}*/


/****************************************
 * Payment gateway for handling recurring 
 * donations through paypal
 ****************************************/

/**
 * Implementation of hook_payment_gateway().
 */
/*function ch_donate_payment_gateway() {
  $gateways[] = array(
    'id' => 'ch_paypal_wpp',
    'title' => t('PayPal Website Payments Pro (Covenant House)'),
    'description' => t('Process credit card payments (including recurring donations) using Website Payments Pro.'),
    'credit' => 'ch_paypal_wpp_charge',
    'credit_txn_types' => array(UC_CREDIT_AUTH_ONLY, UC_CREDIT_PRIOR_AUTH_CAPTURE, UC_CREDIT_AUTH_CAPTURE),
  );

  return $gateways;
}*/

/**
 * Process a credit card payment through Website Payments Pro.
 * 
 * This function copies uc_paypal_wpp_charge from uc_paypal.module
 * for handling regular orders.
 * 
 * If there is a recurring donation in the cart, a recurring payment
 * profile is set up.
 */
function ch_paypal_wpp_charge($order_id, $amount, $data) {
  global $user;

  $order = uc_order_load($order_id);
  
  $currency = variable_get('uc_paypal_wpp_currency', 'USD');
  if ( $order->data['currency'] ) {
    $currency = $order->data['currency'];
  }
  
  $recurring = FALSE;
  foreach ( $order->products as $product ) {
    $item = node_load($product->nid);
    if ( $item->type == 'donation_monthly' ) {
      $recurring = TRUE;
      // can't process a recurring donation together with other items
      if ( count($order->products) > 1 ) {
        $message = t('Unable to process order. Cart cannot contain recurring donations and individual items/donations at the same time.');
        $result = array(
          'success' => FALSE,
          'message' => $message,
          'uid' => $user->uid,
        );
      }
      break;
    }
  }

  $context = array(
    'revision' => 'formatted-original',
    'location' => 'paypal-wpp-charge',
  );
  $options = array(
    'sign' => FALSE,
    'thou' => FALSE,
    'dec' => '.',
  );

  if ($data['txn_type'] == UC_CREDIT_PRIOR_AUTH_CAPTURE) {
    $nvp_request = array(
      'METHOD' => 'DoCapture',
      'AUTHORIZATIONID' => $data['auth_id'],
      'AMT' => uc_price($amount, $context, $options),
      'CURRENCYCODE' => $currency,
      'COMPLETETYPE' => 'Complete',
    );
  }
  else {
    list($desc, $subtotal) = _uc_paypal_product_details($order->products);

    if (intval($order->payment_details['cc_exp_month']) < 10) {
      $expdate = '0'. $order->payment_details['cc_exp_month'] . $order->payment_details['cc_exp_year'];
    }
    else {
      $expdate = $order->payment_details['cc_exp_month'] . $order->payment_details['cc_exp_year'];
    }

    $cc_type = NULL;
    if (isset($order->payment_details['cc_type'])) {
      switch (strtolower($order->payment_details['cc_type'])) {
        case 'amex':
        case 'american express':
          $cc_type = 'Amex';
          break;
        case 'visa':
          $cc_type = 'Visa';
          break;
        case 'mastercard':
        case 'master card':
          $cc_type = 'MasterCard';
          break;
        case 'discover':
          $cc_type = 'Discover';
          break;
      }
    }
    if (is_null($cc_type)) {
      $cc_type = _uc_paypal_card_type($order->payment_details['cc_number']);
      if ($cc_type === FALSE) {
        drupal_set_message(t('The credit card type did not pass validation.'), 'error');
        watchdog('uc_paypal', 'Could not figure out cc type: @number / @type', array('@number' => $order->payment_details['cc_number'], '@type' => $order->payment_details['cc_type']), WATCHDOG_ERROR);
        return array('success' => FALSE);
      }
    }

    $billing_country = uc_get_country_data(array('country_id' => $order->billing_country));
    if ($billing_country === FALSE) {
      $billing_country = array(0 => array('country_iso_code_2' => 'US'));
    }
    $delivery_country = uc_get_country_data(array('country_id' => $order->delivery_country));
    if ($delivery_country === FALSE) {
      $delivery_country = array(0 => array('country_iso_code_2' => 'US'));
    }
    
    if ( $recurring ) {
      $nvp_request = array(
        'METHOD' => 'CreateRecurringPaymentsProfile',
        'PROFILESTARTDATE' => substr(gmdate(DATE_ATOM), 0, -6).'Z',
        'PROFILEREFERENCE' => $order_id .'-'. time(),
        'DESC' => substr($desc, 0, 127),
        'BILLINGPERIOD' => 'Month',
        'BILLINGFREQUENCY' => 1,
        'AMT' => uc_price($amount, $context, $options),
        'CURRENCYCODE' => $currency,
        'CREDITCARDTYPE' => $cc_type,
        'ACCT' =>  $order->payment_details['cc_number'],
        'EXPDATE' => $expdate,
        'CVV2' => $order->payment_details['cc_cvv'],
        'EMAIL' => substr($order->primary_email, 0, 127),
        'COUNTRYCODE' => $billing_country[0]['country_iso_code_2'],
        'FIRSTNAME' => substr($order->billing_first_name, 0, 25),
        'LASTNAME' => substr($order->billing_last_name, 0, 25),
        'STREET' => substr($order->billing_street1, 0, 100),
        'STREET2' => substr($order->billing_street2, 0, 100),
        'CITY' => substr($order->billing_city, 0, 40),
        'STATE' => uc_get_zone_code($order->billing_zone),
        'ZIP' => $order->billing_postal_code,
        'PHONENUM' => substr($order->billing_phone, 0, 20),
        'TOTALBILLINGCYCLES' => 0,
      );
    } else {
      // use the standard nvp request from uc_paypal.module
      $nvp_request = array(
        'METHOD' => 'DoDirectPayment',
        'PAYMENTACTION' => $data['txn_type'] == UC_CREDIT_AUTH_ONLY ? 'Authorization' : 'Sale',
        'IPADDRESS' => ip_address(),
        'AMT' => uc_price($amount, $context, $options),
        'CREDITCARDTYPE' => $cc_type,
        'ACCT' =>  $order->payment_details['cc_number'],
        'EXPDATE' => $expdate,
        'CVV2' => $order->payment_details['cc_cvv'],
        'FIRSTNAME' => substr($order->billing_first_name, 0, 25),
        'LASTNAME' => substr($order->billing_last_name, 0, 25),
        'STREET' => substr($order->billing_street1, 0, 100),
        'STREET2' => substr($order->billing_street2, 0, 100),
        'CITY' => substr($order->billing_city, 0, 40),
        'STATE' => uc_get_zone_code($order->billing_zone),
        'ZIP' => $order->billing_postal_code,
        'COUNTRYCODE' => $billing_country[0]['country_iso_code_2'],
        'CURRENCYCODE' => $currency,
        'DESC' => substr($desc, 0, 127),
        'INVNUM' => $order_id .'-'. time(),
        'BUTTONSOURCE' => 'Ubercart_ShoppingCart_DP_US',
        'NOTIFYURL' => url('uc_paypal/ipn/'. $order->order_id, array('absolute' => TRUE)),
        'EMAIL' => substr($order->primary_email, 0, 127),
        'PHONENUM' => substr($order->billing_phone, 0, 20),
      );
  
      if (uc_order_is_shippable($order) && !empty($order->delivery_first_name)) {
        $shipdata = array(
          'SHIPTONAME' => substr($order->delivery_first_name .' '. $order->delivery_last_name, 0, 25),
          'SHIPTOSTREET' => substr($order->delivery_street1, 0, 100),
          'SHIPTOSTREET2' => substr($order->delivery_street2, 0, 100),
          'SHIPTOCITY' => substr($order->delivery_city, 0, 40),
          'SHIPTOSTATE' => uc_get_zone_code($order->delivery_zone),
          'SHIPTOZIP' => $order->delivery_postal_code,
          'SHIPTOCOUNTRYCODE' => $delivery_country[0]['country_iso_code_2'],
        );
        $nvp_request += $shipdata;
      }
  
      if (variable_get('uc_credit_cvv_enabled', TRUE)) {
        $nvp_request['CVV2'] = $order->payment_details['cc_cvv'];
      }
    }
  }
  $nvp_response = ch_paypal_api_request($nvp_request, variable_get('uc_paypal_wpp_server', 'https://api-3t.sandbox.paypal.com/nvp'));
  $types = uc_credit_transaction_types();

  if ($nvp_response['ACK'] != 'Success') {
    $message = t('<b>@type failed.</b><br /><b>@severity:</b> @error', array('@type' => $types[$data['txn_type']], '@severity' => $nvp_response['L_SEVERITYCODE0'], '@error' => $nvp_response['L_ERRORCODE0'] .'. '. $nvp_response['L_LONGMESSAGE0']));
    if ($data['txn_type'] != UC_CREDIT_PRIOR_AUTH_CAPTURE) {
      $message .= '<br />'. t('<b>Address:</b> @avscode', array('@avscode' => _uc_paypal_avscode_message($nvp_response['AVSCODE'])));
      if (variable_get('uc_credit_cvv_enabled', TRUE)) {
        $message .= '<br />'. t('<b>CVV2:</b> @cvvmatch', array('@cvvmatch' => _uc_paypal_cvvmatch_message($nvp_response['CVV2MATCH'])));
      }
    }
    $result = array(
      'success' => FALSE,
      'message' => $message,
      'uid' => $user->uid,
    );
  }
  else {
    $message = t('<b>@type</b><br /><b>Success: </b>@amount @currency', array('@type' => $types[$data['txn_type']], '@amount' => uc_price($nvp_response['AMT'], $context, array('sign' => FALSE)), '@currency' => $nvp_response['CURRENCYCODE']));
    if ($data['txn_type'] != UC_CREDIT_PRIOR_AUTH_CAPTURE) {
      $message .= '<br />'. t('<b>Address:</b> @avscode', array('@avscode' => _uc_paypal_avscode_message($nvp_response['AVSCODE'])));
      if (variable_get('uc_credit_cvv_enabled', TRUE)) {
        $message .= '<br />'. t('<b>CVV2:</b> @cvvmatch', array('@cvvmatch' => _uc_paypal_cvvmatch_message($nvp_response['CVV2MATCH'])));
      }
    }
    $result = array(
      'success' => TRUE,
      'comment' => t('PayPal transaction ID: @transactionid', array('@transactionid' => $nvp_response['TRANSACTIONID'])),
      'message' => $message,
      'data' => check_plain($nvp_response['TRANSACTIONID']),
      'uid' => $user->uid,
    );

    // If this was an authorization only transaction...
    if ($data['txn_type'] == UC_CREDIT_AUTH_ONLY) {
      // Log the authorization to the order.
      uc_credit_log_authorization($order_id, $nvp_response['TRANSACTIONID'], $nvp_response['AMT']);
    }
    elseif ($data['txn_type'] == UC_CREDIT_PRIOR_AUTH_CAPTURE) {
      uc_credit_log_prior_auth_capture($order_id, $data['auth_id']);
    }

    // Log the IPN to the database.
    db_query("INSERT INTO {uc_payment_paypal_ipn} (order_id, txn_id, txn_type, mc_gross, status, receiver_email, payer_email, received) VALUES (%d, '%s', '%s', '%s', '%s', '%s', '%s', %d)",
      $order->order_id, $nvp_response['TRANSACTIONID'], 'web_accept', $amount, 'Completed', '', $order->primary_email, time());
  }

  uc_order_comment_save($order_id, $user->uid, $message, 'admin');

  // Don't log this as a payment money wasn't actually captured.
  if (in_array($data['txn_type'], array(UC_CREDIT_AUTH_ONLY))) {
    $result['log_payment'] = FALSE;
  }

  return $result;
}

// Sends a request to PayPal and returns a response array.
function ch_paypal_api_request($request, $server) {
  $request['USER'] = variable_get('uc_paypal_api_username', '');
  $request['PWD'] = variable_get('uc_paypal_api_password', '');
  $request['VERSION'] = '56.0';
  $request['SIGNATURE'] = variable_get('uc_paypal_api_signature', '');

  $data = '';
  foreach ($request as $key => $value) {
    $data .= $key .'='. urlencode(ereg_replace(',', '', $value)) .'&';
  }
  $data = substr($data, 0, -1);

  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $server);
  curl_setopt($ch, CURLOPT_VERBOSE, 0);
  curl_setopt($ch, CURLOPT_POST, 1);
  curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
  curl_setopt($ch, CURLOPT_NOPROGRESS, 1);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 0);
  $response = curl_exec($ch);
  if ($error = curl_error($ch)) {
    watchdog('uc_paypal', $error, NULL, WATCHDOG_ERROR);
  }
  curl_close($ch);

  return _uc_paypal_nvp_to_array($response);
}

function theme_ch_donate_completion_message() {
  if ( $_SESSION['ch_checkout_language'] == 'es' ) {
    drupal_set_title('Gracias por su donación a Covenant House');
    $out = '<p>Su compromiso con nuestros niños proporciona cuidado de crisis inmediato y apoyo continuo para niños en necesidad de un refugio seguro... y nos ayuda a mantener nuestras puertas abiertas las 24 horas del día, los 7 días de la semana, salvando las vidas de los niños.</p>';
    $out .= '<p>Esto no es un recibo oficial. Pronto usted recibirá un correo electrónico de confirmación para efectos de impuesto.</p>';
  } else {
    drupal_set_title('Thank you for your donation to Covenant House');
    $out = '<p>Your commitment to our kids provides immediate crisis care and on-going support for young people in need of a safe haven... and by helping us keep our doors open 24/7, you save lives!</p>';
    $out .= '<p>This is not an official receipt.  You will be receiving a confirmation email shortly.</p>';
  }
  return $out;
}